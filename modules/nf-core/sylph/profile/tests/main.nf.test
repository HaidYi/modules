nextflow_process {

    script "../main.nf"
    process "SYLPH_PROFILE"
    tag "modules"
    tag "modules_nfcore"
    tag "sylph"
    tag "sylph/profile"

    test("sarscov2 illumina single-end [fastq_gz]") {
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

        then {
            def output_content = process.out.profile_out.get(0)

            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions_single") },
                { assert output_content.size() > 1 },  // Ensure there's at least a header and one data line
                { assert output_content[0] == "Sample_file\tGenome_file\tTaxonomic_abundance\tSequence_abundance\tAdjusted_ANI\tEff_cov\tANI_5-95_percentile\tEff_lambda\tLambda_5-95_percentile\tMedian_cov\tMean_cov_geq1\tContainment_ind\tNaive_ANI\tkmers_reassigned\tContig_name" },
                { assert snapshot(output_content.take(5).join("\n")).match("profile_out_content_single") }  // Snapshot first 5 lines
            )
        }
    }

    test("sarscov2 illumina paired-end [fastq_gz]") {
        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

        then {
            def output_content = process.out.profile_out.get(0)

            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions_single") },
                { assert output_content.size() > 1 },
                { assert output_content[0] == "Sample_file\tGenome_file\tTaxonomic_abundance\tSequence_abundance\tAdjusted_ANI\tEff_cov\tANI_5-95_percentile\tEff_lambda\tLambda_5-95_percentile\tMedian_cov\tMean_cov_geq1\tContainment_ind\tNaive_ANI\tkmers_reassigned\tContig_name" },
                { assert snapshot(output_content.take(5).join("\n")).match("profile_out_content_single") }
            )
        }
    }

    test("sarscov2 illumina paired-end [fastq_gz]-stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("stub_output") }
            )
        }
    }
}
