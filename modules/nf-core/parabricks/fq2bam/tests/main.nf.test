nextflow_process {

    name "Test Process PARABRICKS_FQ2BAM"
    script "../main.nf"
    process "PARABRICKS_FQ2BAM"

    tag "bwa/index"
    tag "modules"
    tag "parabricks/fq2bam"
    tag "modules_nfcore"
    tag "parabricks"
    tag "gpu"

    setup {
        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                """
            }
        }

        run("BWA_INDEX", alias: 'BWA_INDEX_PE') {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("SRR389222 - fastq - se") {

        config './nextflow.config'

        when {
            params {
                module_args = '--low-memory'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':true ],
                    [ [ 'read_group':'rg', 'sample':'sm', 'platform':'pl' ] ],
				    [
				        file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
				    ],
                    [],
                    []
				])
                input[1] = Channel.of([
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true),
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam_bai[0][1]).getReadsMD5(),
                    file(process.out.bam_bai[0][2]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("SRR389222 - fastq - se - stub") {
        options '-stub'

        when {
            process {
               """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':true ],
                    [ [ 'read_group':'rg', 'sample':'sm', 'platform':'pl' ] ],
				    [
				        file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
				    ],
                    [],
                    []
				])
                input[1] = Channel.of([
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true),
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }
    }

    test("sarscov2 - fastq - pe") {

        config './nextflow.config'

        when {
            params {
                module_args = '--low-memory'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':false ],
                    [ [ 'read_group':'rg', 'sample':'sm', 'platform':'pl' ] ],
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ],
                    []
				])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam_bai[0][1]).getReadsMD5(),
                    file(process.out.bam_bai[0][2]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq - pe - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':false ],
                    [ [ 'read_group':'rg', 'sample':'sm', 'platform':'pl' ] ],
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
				    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ],
                    []
				])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match() }
            )
        }

    }

    test("sarscov2 - fastq - pe - merge") {

        config './nextflow.config'

        when {
            params {
                module_args = '--low-memory'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':false ],
                    [ [ 'read_group':'rg1', 'sample':'sm1', 'platform':'pl' ], [ 'read_group':'rg2', 'sample':'sm1', 'platform':'pl' ] ],
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
				    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ],
                    []
				])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam_bai[0][1]).getReadsMD5(),
                    file(process.out.bam_bai[0][2]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

    test("sarscov2 - fastq - pe - merge - stub") {

        options '-stub'

        when {
            params {
                module_args = '--low-memory'
                // Ref: https://forums.developer.nvidia.com/t/problem-with-gpu/256825/6
                // Parabricks’s fq2bam requires 24GB of memory.
                // Using --low-memory for testing
            }
            process {
                """
                input[0] = Channel.of([
				    [ 'id':'test', 'read_group':'rg', 'sample':'sm', 'platform':'pl', 'single_end':false ],
                    [ [ 'read_group':'rg1', 'sample':'sm1', 'platform':'pl' ], [ 'read_group':'rg2', 'sample':'sm1', 'platform':'pl' ] ],
				    [
				        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
				    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
				    ],
                    []
				])
                input[1] = Channel.of([
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam_bai[0][1]).getReadsMD5(),
                    file(process.out.bam_bai[0][2]).name,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }

    }

}