nextflow_process {

    name "Test Process SLAMDUNK_ALL"
    script "../main.nf"
    process "SLAMDUNK_ALL"

    tag "modules"
    tag "modules_nfcore"
    tag "slamdunk"
    tag "slamdunk/all"

    test("slamseq - fastq") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test_bed' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { file(it[1]).getName() },
                    process.out.filtered_bam.collect { file(it[1]).getName() },
                    process.out.filtered_bai.collect { file(it[1]).getName() },
                    process.out.vcf,
                    process.out.tsv,
                    process.out.plus_bedgraph,
                    process.out.mins_bedgraph,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("slamseq - fastq - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test_ref' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test_bed' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [[], []]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.bam,
                    process.out.filtered_bam,
                    process.out.filtered_bai,
                    process.out.vcf,
                    process.out.tsv,
                    process.out.plus_bedgraph,
                    process.out.mins_bedgraph,
                    process.out.versions
                ).match() }
            )
        }

    }

}
