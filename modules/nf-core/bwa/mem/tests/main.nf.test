nextflow_process {

    name "Test Process BWA_MEM"
    tag "modules_nfcore"
    tag "modules"
    tag "bwa"
    tag "bwa/mem"
    tag "bwa/index"
    script "../main.nf"
    process "BWA_MEM"

    setup {
        run("BWA_INDEX") {
            script "../../index/main.nf"
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("human Paired-End - with alt") {

        setup {
            run("BWA_INDEX", alias: "BWA_INDEX_HUMAN") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                        [id: 'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                input[1] = BWA_INDEX_HUMAN.out.index
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)]
                input[3] = [[id: 'test'],file('/workspace/modules/chr21.alt', checkIfExists: true)]
                input[4] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.cram,
                    process.out.csi,
                    process.out.crai,
                    process.out.versions,
                    bam(process.out.bam[0][1]).getHeader(),
                    bam(process.out.bam[0][1]).getStatistics(),
                    bam(process.out.bam[0][1]).getHeaderMD5(),
                    bam(process.out.bam[0][1]).getReadsMD5()
                    ).match()
                }
            )
        }

    }

}
