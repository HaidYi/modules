nextflow_process {

    name "Test Process TRANSRATE"
    script "../main.nf"
    process "TRANSRATE"

    tag "modules"
    tag "modules_nfcore"
    tag "transrate"
    tag "gunzip"

    test("sarscov2 - assembly - reference") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test_assembly'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = [ [ id:'test_reads', single_end:false ], [] ]
                input[2] = [
                    [ id:'test_reference' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    // test("sarscov2 - assembly - reads - reference") { // reads produce an error: Failed to build Snap index

    //     setup {
    //         run("GUNZIP", alias: "GUNZIP_LEFT") {
    //             script "../../gunzip/main.nf"
    //             process {
    //                 """
    //                 input[0] = [
    //                     [ id: 'test_reads', single_end:false ],
    //                     file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
    //                 ]
    //                 """
    //             }
    //         }

    //         run("GUNZIP", alias: "GUNZIP_RIGHT") {
    //             script "../../gunzip/main.nf"
    //             process {
    //                 """
    //                 input[0] = [
    //                     [ id: 'test_reads', single_end:false ],
    //                     file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
    //                 ]
    //                 """
    //             }
    //         }
    //     }

    //     when {
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test_assembly'],
    //                 file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
    //             ]
    //             input[1] = GUNZIP_LEFT.out.gunzip.join(GUNZIP_RIGHT.out.gunzip).map{ meta, file1, file2 -> [ meta, [file1, file2] ] }
    //             input[2] = [
    //                 [ id:'test_reference' ],
    //                 file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true)
    //             ]
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

    test("sarscov2 - assembly - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test_assembly'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = [ [ id:'test_reads', single_end:false ], [] ]
                input[2] = [ [ id:'test_reference' ], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
