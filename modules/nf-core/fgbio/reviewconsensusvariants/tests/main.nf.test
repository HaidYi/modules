nextflow_process {

    name "Test Process FGBIO_REVIEWCONSENSUSVARIANTS"
    script "../main.nf"
    process "FGBIO_REVIEWCONSENSUSVARIANTS"

    tag "modules"
    tag "modules_nfcore"
    tag "fgbio"
    tag "fgbio/reviewconsensusvariants"

    test("homo_sapiens") {
        config "./nextflow.config"

        setup {
            run("SAMTOOLS_SORT", alias: "SAMTOOLS_SORT_GROUPED") {
                script "../../../samtools/sort/main.nf"
                process {
                    """
                    input[0] = [[ id:'test' ],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/umi/test.paired_end.duplex_umi_grouped.bam', checkIfExists: true)
                                ]
                    input[1] = [[],[]]
                    """
                }
            }

            run("SAMTOOLS_SORT", alias: "SAMTOOLS_SORT_CONSENSUS") {
                script "../../../samtools/sort/main.nf"
                process {
                    """
                    input[0] = [[ id:'test' ],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/umi/test.paired_end.duplex_umi_duplex_consensus.bam', checkIfExists: true)
                                ]
                    input[1] = [[],[]]
                    """
                }
            }

            run("BWA_MEM") {
                script "../../../bwa/mem/main.nf"
                process {
                    """
                    input[0] = [[ id:'test' ],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/umi/test.paired_end.duplex_umi_duplex_consensus.bam', checkIfExists: true)
                                ]
                    input[1] = [[],[]]
                    """
                }
            }

        }



        when {
            process {
                """

                input[0] =
                    SAMTOOLS_SORT_CONSENSUS.out.bam
                    .join(SAMTOOLS_SORT_CONSENSUS.out.csi)
                    .join(SAMTOOLS_SORT_GROUPED.out.bam)
                    .join(SAMTOOLS_SORT_GROUPED.out.csi)
                    .join(Channel.of([[ id: "test" ], file('/workspace/modules/test.intervals')]))

                input[1] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true),
                ]
                input[2] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true),
                ]
                input[3] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [],
                    [],
                    [],
                    [],
                    [],
                ]
                input[1] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true),
                ]
                input[2] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true),
                ]
                input[3] = [
                    [ id:'homo_sapiens'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
